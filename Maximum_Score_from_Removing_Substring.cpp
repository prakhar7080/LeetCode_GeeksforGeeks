class Solution {
public:

    string removeSubstr(string &s, string &matchStr){
        stack<char>st;

        //Using stack to find our desire matchString and remove it
        //Let s = cdbcbb"a"aabab and matchStr = ba
        for(char &ch : s){
            //When matchStr[i] means "a" is equal to a and stack is not empty and
            //top of stack "b" (in this case) is equal to "b" os ba
            if(ch == matchStr[1] && !st.empty() && st.top() == matchStr[0]){
                st.pop();
            }
            //Otherwise
            else{
                st.push(ch);
            }
        }

        //Making string using stack
        string temp;
        while(!st.empty()){
            temp.push_back(st.top());
            st.pop();
        } 
        //Revesig the string generated by stack
        reverse(begin(temp), end(temp));
        return temp;
    }

    int maximumGain(string s, int x, int y) {
        int n = s.size();
        int score = 0;

        //Checking which substring is maximum

        string maxStr = (y > x) ? "ba" : "ab";
        string minStr = (maxStr == "ba") ? "ab" : "ba";

        //First removing substring which has maximum value
        string tempFirst = removeSubstr(s,maxStr);
        int L = tempFirst.size();
        int charRemoved = n-L;
        score += (charRemoved/2) * max(x,y);

        //Second removing substring which has minimum value
        string tempSecond = removeSubstr(tempFirst,minStr);
        int A = tempSecond.size();
        charRemoved = L-A;
        score += (charRemoved/2) * min(x,y);

        return score;
    }
};
